/**
 *  Smart Humidity Fan
 *
 *  Turns on a fan when you start taking a shower... turns it back off when you are done.
 *    -Uses humidity change rate for rapid response
 *    -Timeout option when manaully controled (for stench mitigation)
 *
 *  Copyright 2018 Craig Romei
 *  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
 *
 */

definition(
    name: "Smart Humidity Fan",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Control a fan (switch) based on relative humidity.",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg"
)

preferences
{
	section("Bathroom Devices")
    {
    	paragraph "NOTE: The humidity sensor you select will need to report about 5 min or less."
		input "HumiditySensor", "capability.relativeHumidityMeasurement", title: "Humidity Sensor:", required: true
		input "FanSwitch", "capability.switch", title: "Fan Location:", required: true
    }
    section("Fan Activation")
    {
		input "HumidityIncreaseRate", "number", title: "Humidity Increase Rate :", required: true, defaultValue: 2
        input "HumidityThreshold", "number", title: "Humidity Threshold (%):", required: false, defaultValue: 65
	}
    section("Fan Deactivation")
    {
		input "HumidityDropTimeout", "number", title: "How long after the humidity starts to drop should the fan turn off (minutes):", required: true, defaultValue:  10
		input "HumidityDropLimit", "number", title: "What percentage above the starting humidity before triggering the turn off delay:", required: true, defaultValue:  25
	}
    section("Manual Activation")
    {
    	paragraph "When should the fan turn off when turned on manually?"
        input "ManualControlMode", "enum", title: "Off After Manual-On?", required: true, options: ["Manually", "By Humidity", "After Set Time"], defaultValue: "After Set Time"
        paragraph "How many minutes until the fan is auto-turned-off?"
        input "ManualOffMinutes", "number", title: "Auto Turn Off Time (minutes)?", required: false, defaultValue: 20
    }
	section("Logging")
	{         		input(
            		name			: "logLevel"
                	,title			: "IDE logging level" 
                	,multiple		: false
                	,required		: true
                	,type			: "enum"
                    ,options		: getLogLevels()
                	,submitOnChange	: false
                   	,defaultValue	: "10"
            	)  
	}
}

def installed()
{
    initialize()
}

def updated()
{
	unsubscribe()
    initialize()
}

def initialize()
{
    infolog "Initializing"
	state.humpres = false
	state.OverThreshold = false
	state.AutomaticallyTurnedOn = false
	state.TurnOffLaterStarted = false
    subscribe(HumiditySensor, "humidity", HumidityHandler)
    subscribe(FanSwitch, "switch", FanSwitchHandler)
}

def HumidityHandler(evt)
{
    infolog "HumidityHandler:running humidity check"
	state.OverThreshold = CheckThreshold(evt)
	state.humpres = GetHumidityChange(evt)
	debuglog "HumidityHandler: humiditychange = ${state.humpres}"
	debuglog "HumidityHandler: state.OverThreshold = ${state.OverThreshold}"
	debuglog "HumidityHandler: state.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}"
	debuglog "HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}"
	debuglog "HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate}"
    debuglog "HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}"
    debuglog "HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}"
    debuglog "HumidityHandler: state.currentHumidity = ${state.currentHumidity}"
    
	//if the humidity is high (or rising fast) and the fan is off, kick on the fan
    if (((state.HumidityChangeRate>HumidityIncreaseRate)||state.OverThreshold) && FanSwitch.currentValue("switch") == "off")
    {
		state.AutomaticallyTurnedOn = true
		state.TurnOffLaterStarted = false
        state.AutomaticallyTurnedOnAt = now()
        infolog "HumidityHandler:Turn On Fan due to humidity increase"
       	FanSwitch.on()
        state.StartingHumidity = state.lastHumidity
        state.HighestHumidity = state.currentHumidity
		debuglog "HumidityHandler: new state.StartingHumidity = ${state.StartingHumidity}"
		debuglog "HumidityHandler: new state.HighestHumidity = ${state.HighestHumidity}"
    }
    //turn off the fan when humidity returns to normal and it was kicked on by the humidity sensor
    else if((state.AutomaticallyTurnedOn || ManualControlMode == "By Humidity")&& !state.TurnOffLaterStarted)
    {
        if(state.currentHumidity>state.HighestHumidity)
        {
            state.HighestHumidity = state.currentHumidity
			debuglog "HumidityHandler: new state.HighestHumidity = ${state.HighestHumidity}"
        }
		debuglog "HumidityHandler: targetHumidity = ${state.StartingHumidity+HumidityDropLimit/100*(state.HighestHumidity-state.StartingHumidity)}"
        if(state.currentHumidity<=(state.StartingHumidity+HumidityDropLimit/100*(state.HighestHumidity-state.StartingHumidity)))
        {
            if(HumidityDropTimeout == 0)
            {
        		infolog "HumidityHandler:Fan Off"
                        TurnOffFanSwitch()
            }
            else
            {
				infolog "HumidityHandler:Turn Fan off in ${HumidityDropTimeout} minutes."
				state.TurnOffLaterStarted = true
				runIn(60 * HumidityDropTimeout.toInteger(), TurnOffFanSwitchCheckHumidity)
				debuglog "HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}"
            }
        }
	}
}

def FanSwitchHandler(evt)
{
    infolog "FanSwitchHandler::Switch changed"
	debuglog "FanSwitchHandler: ManualControlMode = ${ManualControlMode}"
	debuglog "FanSwitchHandler: ManualOffMinutes = ${ManualOffMinutes}"
	debuglog "HumidityHandler: state.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}"
	switch(evt.value)
    {
    	case "on":
                if(!state.AutomaticallyTurnedOn && (ManualControlMode == "After Set Time") && ManualOffMinutes)
                {
                    if(ManualOffMinutes == 0)
                    {
        				debuglog "FanSwitchHandler::Fan Off"
                        TurnOffFanSwitch()
                    }
                    else
                    {
						debuglog "FanSwitchHandler::Will turn off later"
                        runIn(60 * ManualOffMinutes.toInteger(), TurnOffFanSwitch)
                    }
                }
	        break
        case "off":
    		debuglog "FanSwitchHandler::Switch turned off"
		    state.AutomaticallyTurnedOn = false
			state.TurnOffLaterStarted = false
        	break
    }
}

def TurnOffFanSwitchCheckHumidity()
{
    debuglog "TurnOffFanSwitchCheckHumidity: Function Start"
	if(FanSwitch.currentValue("switch") == "on")
    {
        debuglog "TurnOffFanSwitchCheckHumidity: state.HumidityChangeRate ${state.HumidityChangeRate}"
        if(state.HumidityChangeRate > 0)
        {
        	debuglog "TurnOffFanSwitchCheckHumidity: Didn't turn off fan because humidity rate is ${state.HumidityChangeRate}"
            state.AutomaticallyTurnedOn = true
            state.AutomaticallyTurnedOnAt = now()
            runIn(600, TurnOffFanSwitchCheckHumidity)
        }
        else
        {
        	debuglog "TurnOffFanSwitchCheckHumidity: Turning the Fan off now"
        	TurnOffFanSwitch()
        }
    }
}

def TurnOffFanSwitch()
{
    if(FanSwitch.currentValue("switch") == "on")
    {
        infolog "TurnOffFanSwitch:Fan Off"
        FanSwitch.off()
	state.AutomaticallyTurnedOn = false
	state.TurnOffLaterStarted = false
    }
}

def CheckThreshold(evt)
{
	double lastevtvalue = Double.parseDouble(evt.value.replace("%", ""))
	if(lastevtvalue >= HumidityThreshold)
		{
			
			infolog "IsHumidityPresent: Humidity is above the Threashold"
			return true
		}
		else
		{
			return false
		}
}
def GetHumidityChange(evt)
{
    
    def states = evt.device.eventsSince(new Date((long)(evt.date.getTime() - (21*60000)))).findAll{it.name == "humidity"}
                debuglog "IsHumidityPresent: numStates is ${states.size().toString()}"
    
    double lastevtvalue = Double.parseDouble(evt.value.replace("%", ""))
    def lastevtdate = evt.date
    
	debuglog "IsHumidityPresent: Humidity events in the last 20 min."
	for(int i = 0; i < states.size(); i++)
	{
		debuglog "IsHumidityPresent: i:${i}  humidity: ${states[i].value} Date: ${states[i].date}"
	}
	if(states.size()<2)
	{
		state.HumidityChangeRate =-100
        state.currentHumidity = Double.parseDouble(states[0].value.replace("%", ""))
		debuglog "IsHumidityPresent: Not enough events in the last 20 min."
		return false
	}
    else
    {
        state.HumidityChangeRate = 0
        def currentHumidity = Double.parseDouble(states[0].value.replace("%", ""))
        def lastHumidity = Double.parseDouble(states[1].value.replace("%", ""))
        state.HumidityChangeRate = currentHumidity - lastHumidity
        state.lastHumidity = lastHumidity
        state.currentHumidity = currentHumidity
        return true
    }

}
def debuglog(statement)
{   
	def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    
    if (logL == 0) {return}//bail
    else if (logL >= 2){
		log.debug(statement)
	}
}
def infolog(statement)
{	
	def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    
    if (logL == 0) {return}//bail
    else if (logL >= 1){
		log.info(statement)
	}
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
