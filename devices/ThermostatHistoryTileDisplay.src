/**
 *  V1.0.0 Init try
 *
 *  Copyright 2019 Craig Romei
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */


metadata {
		definition (name: "ThermostatHistoryTileDisplay", 
					namespace: "napalmcsr", 
					author: "Craig Romei")
			{
				capability "Sensor"
				command "clearData", ["string"]
				command "SetToday", ["string"]	
				command "refresh"
				attribute "Today", "string"
				attribute "DriverVersion", "string"
				attribute "DriverStatus", "string"
				attribute "DriverUpdate", "string"
		}
	preferences(){input "debugMode", "bool", title: "Enable debug logging", required: true, defaultValue: false}
}	
			
			
			
def initialize(){updated()}	
def updated() {
    infolog "Updated - Start"
    version()
	initialState()
    infolog "Updated - End"
	}			
			
def clearData(){
    infolog "clearData - Start"
	state.TodayData = " "
	sendEvent(name: "SetToday", value: state.TodayData, isStateChange: true)
    infolog "clearData - End"
	
}

def initialState(){
    infolog "initialState - Start"
	sendEvent(name: "CustomDisplay", value: "Awaiting Data")	
    infolog "initialState - End"  
}

def SetToday(TodayData){
    infolog "SetToday - Start"
	state.TodayData = TodayData
	state.CharNumber = state.tileIn.length()
	if(state.tileIn.length() > 1024){
		debuglog("Too many characters!")
		sendEvent(name: "SetToday", value: "Too many characters!", isStateChange: true)
	}
	debuglog( "Attribute Content: $state.TodayData")
    infolog "SetToday - End"
}
			
def refresh(){
    infolog "SetToday - Start"
	sendEvent(name: "SetToday", value: state.TodayData, isStateChange: true)
}





















def debuglog(statement)
{   
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
	{
	  	log.debug(statement)
	}
}
def infolog(statement)
{       
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
    {
    	log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
def version(){
        unschedule()
        schedule("0 0 9 ? * FRI *", updateCheck) // Cron schedule - How often to perform the update check - (This example is 9am every Friday)
        updateCheck()  
}

def display(){
	updateCheck()
	debuglog "state.Status: ${state.Status}"
        if(state.Status){
        section{paragraph "Version: $state.version -  $state.Copyright"}
        
        if(state.Status != "Current"){
        section{ 
        paragraph "$state.Status"
        paragraph "$state.UpdateInfo"
    }
    }
}
}


def updateCheck(){
    setVersion()
        def paramsUD = [uri: "https://napalmcsr.github.io/Hubitat_Napalmcsr/versions.json"]   // This is the URI & path to your hosted JSON file
       try {
        httpGet(paramsUD) { respUD ->
//  log.warn " Version Checking - Response Data: ${respUD.data}"   // Troubleshooting Debug Code 
                def copyrightRead = (respUD.data.copyright)
                state.Copyright = copyrightRead
            def newVerRaw = (respUD.data.versions.Application.(state.InternalName))
            def newVer = (respUD.data.versions.Application.(state.InternalName).replace(".", ""))
                def currentVer = state.version.replace(".", "")
                state.UpdateInfo = (respUD.data.versions.UpdateInfo.Application.(state.InternalName))
                state.author = (respUD.data.author)
           
                if(newVer == "NLS"){
            state.Status = "<b>** This app is no longer supported by $state.author  **</b> (But you may continue to use it)"       
            log.warn "** This app is no longer supported by $state.author **"      
                }           
                else if(currentVer < newVer){
        state.Status = "<b>New Version Available (Version: $newVerRaw)</b>"
        log.warn "** There is a newer version of this app available  (Version: $newVerRaw) **"
        log.warn "** $state.UpdateInfo **"
                } 
                else{ 
                state.Status = "Current"
                log.info "You are using the current version of this app"
                }
                                       }
        } 
        catch (e) {
            state.Status = "Error"
        log.error "Something went wrong: CHECK THE JSON FILE AND IT'S URI -  $e"
                }
                
    
        //     
}

def setVersion(){
                state.version = "1.0.1" // Version number of this app
                state.InternalName = "ThermostatHistoryTileDisplay"   // this is the name used in the JSON file for this app
